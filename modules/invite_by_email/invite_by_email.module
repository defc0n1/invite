<?php

/**
 * @file
 * Contains invite_by_email.module..
 */
use \Drupal\Core\Mail;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function invite_by_email_invite_insert($invite) {
  /** @var \Drupal\invite\InviteInterface $invite */
  if ($invite->getType() == 'invite_by_email') {
    invite_by_email_send_invitation($invite);
  }
}

/**
 * This function implements email sending method on invite creation.
 */
function invite_by_email_send_invitation($invite) {
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $config = \Drupal::config('invite.invitesettings');
  /** @var \Drupal\invite\InviteInterface $invite */
  $attempt = $invite->getResendAttempt();
  if ($attempt == 0) {
    $expire_config = $config->get('invitation_expiry');
    $expiry_time = REQUEST_TIME + $expire_config * 24 * 60 * 60;
    $invite->setExpiryTime($expiry_time);
    $attempt++;
    $invite->setResendAttempt($attempt);
    $invite->save();
  }

  $from = $invite->field_invitation_email_address->value;
  /** @var \Drupal\user\EntityOwnerInterface $inviter */
  $inviter = $invite->getOwner();

  if (empty($from)) {
    // Never pass an empty string to drupal_mail()
    $from = NULL;
  }

  $params = array('invite' => $invite);

  // Override Reply-To address.
  if (!$config->get('invite_use_users_email_replyto')) {
    $reply_to = $config->get('invite_manual_reply_to');
  }
  else {
    $reply_to = $inviter->getOwner()->getEmail();
  }
  if (!empty($reply_to)) {
    $params['reply-to'] = $reply_to;
  }

  // Send e-mail.
  $result =  \Drupal::service('plugin.manager.mail')->mail('invite_by_email', 'invite', $invite->field_invitation_email_address->value, $language, $params, $from, TRUE);
  return $result['result'];
}

/**
 * Implements hook_mail().
 */
function invite_by_email_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $langcode = $message['langcode'];
  /** @var \Drupal\invite\InviteInterface $invite */
  $invite = $params['invite'];
  if (!empty($params['reply-to'])) {
    $message['headers']['Reply-To'] = $params['reply-to'];
  }
  $invite_accept_url = \Drupal::url('invite.invite_accept_controller_accept',
    array(
      'reg_code' => $invite->getRegistrationCode(),
    ),
    array(
      'absolute' => TRUE,
    )
  );
  /** @var \Drupal\user\EntityOwnerInterface $inviter */
  $inviter_id = $invite->getOwnerId();

  /** @var \Drupal\user\UserInterface $inviter_user */
  $inviter_user = \Drupal::entityManager()->getStorage('user')->load($inviter_id);
  $variables['invite_by_email'] = array(
    'invite_accept_url' => $invite_accept_url,
    'inviter_name' => $inviter_user->getDisplayName(),
  );

  $token_options = ['langcode' => $langcode, 'callback' => 'invite_by_email_token_options', 'clear' => TRUE];
  //$message['subject'] = str_replace(array("\r", "\n"), '', trim($invite->field_invitation_email_subject->value));
  $message['subject'] = $token_service->replace($invite->field_invitation_email_subject->value, $variables, $token_options);
  //$message['body'][] = $invite->field_invitation_email_body->value;
  $message['body'][] = $token_service->replace($invite->field_invitation_email_body->value, $variables, $token_options);
}

/**
 * Implements hook_form_alter().
 */
function invite_by_email_form_invite_invite_by_email_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('invite.invitebyemailsettings');
  /** @var \Drupal\invite\InviteInterface $invite */
  $invite = $form_state->getFormObject()->getEntity();
  $language_subject = $invite->language();

  $message_editable = TRUE;
  // Hide if message is not editable.
  if (!$message_editable) {
    $form['field_invitation_email_subject']['#type'] = 'hidden';
    $form['field_invitation_email_body']['#type'] = 'hidden';
  }
  else {
    $form['field_invitation_email_subject']['widget'][0]['value']['#default_value'] = $config->get('invite_default_mail_subject');
    $form['field_invitation_email_body']['widget'][0]['#default_value'] = $config->get('invite_default_mail_body');
  }

  $form['#validate'][] = 'invite_by_email_form_invite_form_validate';
  $form['actions']['submit']['#value'] = t('Send Invitation');
}


/**
 * Implementation for custom validation handler.
 * That will prevent sending invitation to same user twice and sending invitation
 * to him/herself.
 *
 * */
function invite_by_email_form_invite_form_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $account = \Drupal::currentUser();
  $mail_address = $form_state->getValue('field_invitation_email_address');

  foreach($mail_address AS $key => $value) {
    if (is_array($value)) {
      if ($account->getEmail() == $value['value']) {
        $form_state->setErrorByName('field_invitation_email_address', t('You couldn\'t invite yourself.'));
      }
      /** @var \Drupal\invite\InviteInterface $current_invite */
      $current_invite = \Drupal::entityManager()->getStorage('invite')->loadByProperties(array('field_invitation_email_address' => $value['value']));
      if ($current_invite) {
        $form_state->setErrorByName('field_invitation_email_address', t('You have invited this user already'));
      }
    }
  }
}

/**
 * Implements token replacement functionality for replacing invite tokens.
 */
function invite_by_email_token_options(&$replacements, $data, $options) {
  if (isset($data['invite_by_email'])) {
    $replacements['[invite:inviter:name]'] = $data['invite_by_email']['inviter_name'];
    $replacements['[invite:invite-accept-link]'] = $data['invite_by_email']['invite_accept_url'];
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function invite_by_email_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $account = \Drupal::currentUser();
  /** @var \Drupal\invite\InviteInterface $invite_object */
  $invite = invite_load_from_session();
  $invite_object = current($invite);
  if ($invite_object && $invite_object->getType() == 'invite_by_email') {
    $form['account']['mail']['#default_value'] = $invite_object->field_invitation_email_address->value;
    $form['account']['mail']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function invite_by_email_user_insert($user) {
  /** @var \Drupal\invite\InviteInterface $invite_object */
  $invite = invite_load_from_session();
  $invite_object = current($invite);
  if ($invite_object && ($invite_object->getInviteeUserId() == 0) && ($invite_object->getInviteStatus() == INVITE_VALID)) {
    /** @var \Drupal\user\UserInterface $user */
    $invite_object->setInviteeUserId($user->id());
    $invite_object->setJoinedTime(REQUEST_TIME);
    $invite_object->setInviteStatus(INVITE_USED);
    $invite_object->save();

    if (isset($_SESSION)) {
      unset($_SESSION[INVITE_SESSION_CODE]);
    }
  }
}
